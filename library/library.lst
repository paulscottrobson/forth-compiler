              	; --------------------------------------
              	; zasm: assemble "library.asm"
              	; date: 2017-08-23 15:39:42
              	; --------------------------------------


              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       library.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : main file.
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
8000:         	    org     0x8000
              	
              	boundary = 4
              	
              	    include     "system.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       system.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : system words
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;  0BR : Branch to the address given in the following two bytes if TOS = 0, drops TOS
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8000:         	word_0br:                               ; [[[0BR]]]
8000: E1      	    pop     hl                          ; get TOS
8001: 7C      	    ld      a,h                         ; check if zero
8002: B5      	    or      l 
8003: 2807    	    jr      z,word_Br                   ; if it is execute [BR] unconditional branch
8005: 03      	    inc     bc                          ; if non zero skip over branch address    
8006: 03      	    inc     bc
8007: DDE9    	    jp      (ix)                        ; exit
              	
              	; ***********************************************************************************
              	;
              	;   BR : Unconditional Branch to the address given in the following two bytes
              	;
              	; ***********************************************************************************
              	
8009: FFFFFF  	    align   boundary
              	
800C:         	word_Br:                                ; [[[BR]]]
800C: 0A      	    ld      a,(bc)                      ; read next word in low high order into BC
800D: 6F      	    ld      l,a                         ; temp store for LSB
800E: 03      	    inc     bc                  
800F: 0A      	    ld      a,(bc)                      ; read MSB
8010: 47      	    ld      b,a                         ; put into BC
8011: 4D      	    ld      c,l                         
8012: DDE9    	    jp      (ix)                        ; exit
              	
              	; ***********************************************************************************
              	;
              	;               Push 2 byte literal in the following 2 bytes on the stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8014:         	word_literal:                           ; [[[LIT]]]
8014: 0A      	    ld      a,(bc)                      ; read literal from next byte LSB first
8015: 03      	    inc     bc
8016: 6F      	    ld      l,a
8017: 0A      	    ld      a,(bc)                      ; then MSB
8018: 03      	    inc     bc
8019: 1805    	    jr      __libs_pushALAndExit
              	
              	; ***********************************************************************************
              	;
              	;                  Push 1 byte literal (0-255) unsigned on the stack
              	;
              	; ***********************************************************************************
              	
801B: FF      	    align   boundary
              	
801C:         	word_shortunsignedliteral:              ; [[[USHORTLIT]]]
801C: 0A      	    ld      a,(bc)                      ; read literal from next byte LSB first
801D: 03      	    inc     bc
801E: 6F      	    ld      l,a
801F: AF      	    xor     a                           ; zero A
8020:         	__libs_pushALAndExit:    
8020: 67      	    ld      h,a                         ; put A in H
8021: E5      	    push    hl                          ; stack it
8022: DDE9    	    jp      (ix)                        ; and exit.
              	    include     "constants.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       constants.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : constants
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	
              	coreconst macro #value
              		ld 		l,#value					; [[#value]]
              		jr 		__libc_const
              		endm
              	
              		coreconst 1 						; constants that are run fast and compact.
8024: 2E01    		ld 		l,1					; [[1]]
8026: 1820    		jr 		__libc_const
              		coreconst 2 						; any here (and 0/-1) won't use literal words
8028: 2E02    		ld 		l,2					; [[2]]
802A: 181C    		jr 		__libc_const
              		coreconst 3
802C: 2E03    		ld 		l,3					; [[3]]
802E: 1818    		jr 		__libc_const
              		coreconst 4
8030: 2E04    		ld 		l,4					; [[4]]
8032: 1814    		jr 		__libc_const
              		coreconst 5
8034: 2E05    		ld 		l,5					; [[5]]
8036: 1810    		jr 		__libc_const
              		coreconst 8 
8038: 2E08    		ld 		l,8					; [[8]]
803A: 180C    		jr 		__libc_const
              		coreconst 10
803C: 2E0A    		ld 		l,10					; [[10]]
803E: 1808    		jr 		__libc_const
              		coreconst 16
8040: 2E10    		ld 		l,16					; [[16]]
8042: 1804    		jr 		__libc_const
              		coreconst 100
8044: 2E64    		ld 		l,100					; [[100]]
8046: 1800    		jr 		__libc_const
              	
8048:         	__libc_const:
8048: 2600    		ld 		h,0 						; HL now constant
804A: E5      		push 	hl 							; push on stack
804B: DDE9    		jp 		(ix) 						; exit
              	
              	    include     "unary.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       unary.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : unary operators
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;							Add 1 to the Top of the Stack
              	;
              	; ***********************************************************************************
              	
804D: FFFFFF  	    align   boundary
              	
8050:         	word_add1:                              ; [[1+]]
8050: E1      	    pop     hl 
8051:         	__libu_incHLAndPush:
8051: 23      	    inc     hl
8052: 1815    	    jr      __libu_pushHLExit
              	
              	; ***********************************************************************************
              	;
              	;							Add 2 to the Top of the Stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8054:         	word_add2:                              ; [[2+]]
8054: E1      	    pop     hl 
8055: 23      	    inc     hl
8056: 1811    	    jr      __libu_pushHLExit
              	
              	; ***********************************************************************************
              	;
              	;						Subtract 1 from the Top of the Stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8058:         	word_sub1:                              ; [[1-]]
8058: E1      	    pop     hl 
8059:         	__libu_decHLAndPush:    
8059: 2B      	    dec     hl
805A: 180D    	    jr      __libu_pushHLExit
              	
              	; ***********************************************************************************
              	;
              	;						Subtract 2 from the Top of the Stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
805C:         	word_sub2:                              ; [[2-]]
805C: E1      	    pop     hl 
805D: 2B      	    dec     hl
805E: 1809    	    jr      __libu_pushHLExit
              	
              	; ***********************************************************************************
              	;
              	;						Shift left / Double the Top of the Stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8060:         	word_shiftleft:                         ; [[2*]]
8060: E1      	    pop     hl 
8061: 29      	    add     hl,hl
8062: 1805    	    jr      __libu_pushHLExit
              	
              	; ***********************************************************************************
              	;
              	;				Arithmetic shift right / Halve the Top of the Stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8064:         	word_shiftright:                        ; [[2/]]
8064: E1      	    pop     hl 
8065: CB2C    	    sra     h 							; shift h right into carry
8067: CB1D    	    rr      l 							; rotate l right from carry
8069:         	__libu_pushHLExit:
8069: E5      	    push    hl 							; push on stack and exit
806A: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;							Negate the top of the stack.
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
806C:         	word_negate:                            ; [[0-]]
806C: D9      	    exx                                 
806D: D1      	    pop     de                          ; values to subtract
806E: AF      	    xor 	a 							; clear A and carry
806F: 6F      	    ld 		l,a 						; use that to zero HL
8070: 67      	    ld 		h,a
8071: ED52    	    sbc 	hl,de 						; calculate 0-value
8073: E5      	    push    hl 							; push on stack and exit
8074: DDE9    	    jp      (ix)
              	
              	    include     "binary.asm"    
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       binary.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : binary operators
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;                               add top 2 values
              	;
              	; ***********************************************************************************
              	
8076: FFFF    	    align   boundary
              	
8078:         	word_add:                               ; [[+]]
8078: D9      	    exx                                 ; need both registers
8079: D1      	    pop     de                          ; values to add
807A: E1      	    pop     hl
807B: 19      	    add     hl,de                       ; add them.
807C:         	__libb_pushHLExxAndExit:    
807C: E5      	    push    hl                          ; save result
807D: D9      	    exx                                 ; fix up registers
807E: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                           Subtract 2nd value from first
              	;
              	; ***********************************************************************************
              	
8080:         	word_subtract:                          ; [[-]]
8080: D9      	    exx                                 ; need both registers
8081: D1      	    pop     de                          ; values to add
8082: E1      	    pop     hl
8083:         	__subtractAndSave:    
8083: A7      	    and     a                           ; clear carry
8084: ED52    	    sbc     hl,de                       ; subtract them.
8086: 18F4    	    jr      __libb_pushHLExxAndExit     ; push result and exit
              	
              	; ***********************************************************************************
              	;
              	;                               and top 2 values
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8088:         	word_and:                               ; [[and]]
8088: D9      	    exx                                 ; need both registers
8089: D1      	    pop     de                          ; values to work with
808A: E1      	    pop     hl
808B: 7C      	    ld      a,h                         ; do the operation
808C: A2      	    and     d
808D: 67      	    ld      h,a
808E: 7D      	    ld      a,l
808F: A3      	    and     e
8090: 6F      	    ld      l,a
8091: 18E9    	    jr      __libb_pushHLExxAndExit     ; push result and exit
              	
              	; ***********************************************************************************
              	;
              	;                               or top 2 values
              	;
              	; ***********************************************************************************
              	
8093: FF      	    align   boundary
              	
8094:         	word_or:                                ; [[or]]
8094: D9      	    exx                                 ; need both registers
8095: D1      	    pop     de                          ; values to work with
8096: E1      	    pop     hl
8097: 7C      	    ld      a,h                         ; do the operation
8098: B2      	    or      d
8099: 67      	    ld      h,a
809A: 7D      	    ld      a,l
809B: B3      	    or      e
809C: 6F      	    ld      l,a
809D: 18DD    	    jr      __libb_pushHLExxAndExit     ; push result and exit
              	
              	; ***********************************************************************************
              	;
              	;                               xor top 2 values
              	;
              	; ***********************************************************************************
              	
809F: FF      	    align   boundary
              	
80A0:         	word_xor:                               ; [[xor]]
80A0: D9      	    exx                                 ; need both registers
80A1: D1      	    pop     de                          ; values to work with
80A2: E1      	    pop     hl
80A3: 7C      	    ld      a,h                         ; do the operation
80A4: AA      	    xor     d
80A5: 67      	    ld      h,a
80A6: 7D      	    ld      a,l
80A7: AB      	    xor     e
80A8: 6F      	    ld      l,a
80A9: 18D1    	    jr      __libb_pushHLExxAndExit     ; push result and exit
              	    include     "memory.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       memory.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : memory access
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;                           Read 16 bit word, address TOS
              	;
              	; ***********************************************************************************
              	
80AB: FF      	    align   boundary
              	
80AC:         	word_ReadWord:                          ; [[@]]
80AC: E1      	    pop     hl                          ; address to read
80AD: 7E      	    ld      a,(hl)                      ; low byte
80AE: 23      	    inc     hl
80AF: 66      	    ld      h,(hl)                      ; high byte
80B0: 6F      	    ld      l,a                         ; make word
80B1: E5      	    push    hl                          ; stack and exit
80B2: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                           Read 8 bit byte, address TOS
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
80B4:         	word_ReadByte:                          ; [[C@]]
80B4: E1      	    pop     hl                          ; address to read
80B5: 6E      	    ld      l,(hl)                      ; one byte only
80B6: 2600    	    ld      h,0                         ; MSB 0
80B8: E5      	    push    hl                          ; stack and exit
80B9: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                   Write 16 bit word, address TOS data 2nd
              	;
              	; ***********************************************************************************
              	
80BB: FF      	    align   boundary
              	
80BC:         	word_WriteWord:                         ; [[!]]
80BC: D9      	    exx                                 ; alt register set
80BD: E1      	    pop     hl                          ; address to write
80BE: D1      	    pop     de                          ; data to write
80BF: 73      	    ld      (hl),e                      ; write LSB
80C0: 23      	    inc     hl
80C1: 72      	    ld      (hl),d                      ; write MSB
80C2: 1804    	    jr      __libm_exxAndExit           ; switch registers back and exit
              	
              	; ***********************************************************************************
              	;
              	;                   Write 8 bit byte, address TOS data 2nd
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
80C4:         	word_WriteByte:                         ; [[C!]]
80C4: D9      	    exx                                 ; alt register set
80C5: E1      	    pop     hl                          ; address to write
80C6: D1      	    pop     de                          ; data to write
80C7: 73      	    ld      (hl),e                      ; write LSB
80C8:         	__libm_exxAndExit:                      ; exit routine, exx and exit where needed.
80C8: D9      	    exx                                 ; original register set                        
80C9: DDE9    	    jp      (ix)    
              	
              	; ***********************************************************************************
              	;
              	;                           Add 2nd word to memory at TOS
              	;
              	; ***********************************************************************************
              	
80CB: FF      	    align   boundary
              	
80CC:         	word_AddStore:                          ; [[+!]]
80CC: D9      	    exx                                 ; alt register set
80CD: E1      	    pop     hl                          ; address to write
80CE: D1      	    pop     de                          ; data to add
80CF: 7B      	    ld      a,e                         ; do LSB
80D0: 86      	    add     (hl)
80D1: 77      	    ld      (hl),a                      ; do MSB
80D2: 7A      	    ld      a,d
80D3: 8E      	    adc     (hl)
80D4: 77      	    ld      (hl),a
80D5: D9      	    exx                                 ; original set and exit
80D6: DDE9    	    jp      (ix)
              	    include     "rstack.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       rstack.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : return stack words
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;                                       Return from call
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
80D8:         	word_Return:                            ; [[;]]
80D8: 1A      	    ld      a,(de)                      ; pop DE stack to BC
80D9: 4F      	    ld      c,a                         ; LSB first
80DA: 13      	    inc     de
80DB: 1A      	    ld      a,(de)                      ; then MSB
80DC: 47      	    ld      b,a
80DD: DDE9    	    jp      (ix)    
              	
              	; ***********************************************************************************
              	;
              	;                       Move top of return stack to data stack
              	;
              	; ***********************************************************************************
              	
80DF: FF      	    align   boundary
              	
80E0:         	word_returnToData:                      ; [[R>]]
80E0: 1A      	    ld      a,(de)                      ; pop DE stack to HL
80E1: 6F      	    ld      l,a                         ; LSB first
80E2: 13      	    inc     de
80E3: 1A      	    ld      a,(de)                      ; MSB second
80E4: 67      	    ld      h,a
80E5: 13      	    inc     de
80E6: E5      	    push    hl                          ; push on data stack
80E7: DDE9    	    jp      (ix)                        ; exit
              	
              	; ***********************************************************************************
              	;
              	;                       Mote top of data stack to return stack
              	;
              	; ***********************************************************************************
              	
80E9: FFFFFF  	    align   boundary
              	
80EC:         	word_dataToReturn:                      ; [[>R]]
80EC: E1      	    pop     hl                          ; value to save
80ED: 1B      	    dec     de                          ; MSB first
80EE: 7C      	    ld      a,h
80EF: 12      	    ld      (de),a
80F0: 1B      	    dec     de                          ; LSB second
80F1: 7D      	    ld      a,l
80F2: 12      	    ld      (de),a
80F3: DDE9    	    jp      (ix)
              	    include     "conditional.asm"    
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       conditional.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : conditional operators, true and false
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;                               check if TOS = 0
              	;
              	; ***********************************************************************************
              	
80F5: FFFFFF  	    align   boundary
              	
80F8:         	word_0Equal:                            ; [[0=]]
80F8: E1      	    pop     hl                          ; get value
80F9:         	__util_testzero:    
80F9: 7C      	    ld      a,h                         ; check if zero
80FA: B5      	    or      l
80FB: 2817    	    jr      z,word_ConstMinus1          ; if is, return -1
80FD: 181D    	    jr      word_ConstZero
              	
              	; ***********************************************************************************
              	;
              	;                               check if TOS < 0
              	;
              	; ***********************************************************************************
              	
80FF: FF      	    align   boundary
              	
8100:         	word_0Less:                             ; [[0<]]
8100: E1      	    pop     hl                          ; get value
8101: CB7C    	    bit     7,h                         ; check sign bit
8103: 200F    	    jr      nz,word_ConstMinus1         ; if is set, return -1
8105: 1815    	    jr      word_ConstZero
              	
              	; ***********************************************************************************
              	;
              	;                               check if TOS > 0
              	;
              	; ***********************************************************************************
              	
8107: FF      	    align   boundary
              	
8108:         	word_0Greater:                          ; [[0>]]
8108: E1      	    pop     hl                          ; get value
8109: CB7C    	    bit     7,h                         ; check sign bit
810B: 200F    	    jr      nz,word_ConstZero           ; if is set, return 0 as it's negative
810D: 7C      	    ld      a,h                         ; if not check if zero
810E: B5      	    or      l
810F: 280B    	    jr      z,word_ConstZero            ; if it is, return 0.
8111: 1801    	    jr      word_ConstMinus1            ; return -1 as > 0
              	
              	; ***********************************************************************************
              	;
              	;                               -1 constant also true
              	;
              	; ***********************************************************************************
              	
8113: FF      	    align   boundary
              	
8114:         	word_ConstMinus1:                       ; [[-1]]
8114:         	word_true:                              ; [[true]]
8114: 21FFFF  	    ld      hl,-1
8117: E5      	    push    hl
8118: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                               0 constant also false
              	;
              	; ***********************************************************************************
              	
811A: FFFF    	    align   boundary
              	
811C:         	word_ConstZero:                         ; [[0]]
811C:         	word_false:                             ; [[false]]
811C: 210000  	    ld      hl,0
811F: E5      	    push    hl
8120: DDE9    	    jp      (ix)
              	    include     "stack.asm"
              	; ***********************************************************************************
              	; ***********************************************************************************
              	;
              	;       Name:       stack.asm
              	;       Author:     Paul Robson (paul@robsons.org.uk)
              	;       Purpose:    Core Forth Library : stack words
              	;       Date:       23 August 2017.
              	;
              	; ***********************************************************************************
              	; ***********************************************************************************
              	
              	; ***********************************************************************************
              	;
              	;                       ?dup : duplicate TOS if non-zero
              	;
              	; ***********************************************************************************
              	
8122: FFFF    	    align   boundary
              	
8124:         	word_QDup:                              ; [[?dup]]
8124: E1      	    pop     hl                          ; examine TOS
8125: E5      	    push    hl                          ; don't drop it - just check it.
8126: 7C      	    ld      a,h                         ; check if zero.
8127: B5      	    or      l
8128: 2002    	    jr      nz,word_Dup                 ; if not, do DUP
812A: DDE9    	    jp      (ix)                        ; otherwise exit.
              	
              	; ***********************************************************************************
              	;
              	;                                   Duplicate TOS
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
812C:         	word_Dup:                               ; [[dup]]
812C: E1      	    pop     hl                          ; get tos
812D: E5      	    push    hl                          ; push twice
812E: E5      	    push    hl
812F: DDE9    	    jp      (ix)                        ; otherwise exit.
              	
              	; ***********************************************************************************
              	;
              	;                                       Drop TOS
              	;
              	; ***********************************************************************************
              	
8131: FFFFFF  	    align   boundary
              	
8134:         	word_Drop:                              ; [[drop]]
8134: E1      	    pop     hl                          ; dump tos
8135: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                               Swap top 2 values on stack
              	;
              	; ***********************************************************************************
              	
8137: FF      	    align   boundary
              	
8138:         	word_Swap:                              ; [[swap]]
8138: D9      	    exx                                 ; alt register set
8139: D1      	    pop     de                          ; get values
813A: E1      	    pop     hl                      
813B: D5      	    push    de                          ; write back in the other order.
813C: E5      	    push    hl
813D:         	__libs_exxAndExit:    
813D: D9      	    exx
813E: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                       Copy 2nd on stack onto top of stack
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8140:         	word_Over:                              ; [[over]]
8140: D9      	    exx                                 ; alt register set
8141: D1      	    pop     de                          ; get values
8142: E1      	    pop     hl                      
8143: E5      	    push    hl                          ; write back
8144: D5      	    push    de
8145: E5      	    push    hl                          ; push the 2nd value on top.
8146: 18F5    	    jr      __libs_exxAndExit           ; exx and exit.
              	
              	; ***********************************************************************************
              	;
              	;                           Rotate the top 3 stack values
              	;
              	; ***********************************************************************************
              	
              	    align   boundary
              	
8148:         	word_Rot:                               ; [[rot]]
8148: D9      	    exx
8149: C1      	    pop     bc                          ; BC = TOS
814A: D1      	    pop     de                          ; DE = 2nd
814B: E1      	    pop     hl                          ; HL = 3rd
              	
814C: D5      	    push    de                          ; 2nd to the bottom
814D: C5      	    push    bc                          ; tos on that
814E: E5      	    push    hl                          ; and the 3rd item moves to the top
814F: D9      	    exx
8150: DDE9    	    jp      (ix)
              	
              	; ***********************************************************************************
              	;
              	;                           Pick the nth value on the stack
              	;
              	; ***********************************************************************************
              	
8152: FFFF    	    align   boundary
              	
8154:         	word_Pick:                              ; [[pick]]
8154: D9      	    exx                                 ; need all registers
8155: F9      	    ld      sp,hl                       ; put stack pointer in HL.
8156: D1      	    pop     de                          ; this is the index into the stack
8157: 19      	    add     hl,de                       ; add 2 x to the stack, now points to low value
8158: 19      	    add     hl,de
8159: 5E      	    ld      e,(hl)                      ; read low byte
815A: 23      	    inc     hl
815B: 56      	    ld      d,(hl)                      ; read high byte
815C: D5      	    push    de                          ; push read value onto the stack
815D: 18DE    	    jr      __libs_exxAndExit           ; exx and exit.
              	
              	; = > < >= <= <> (not initially)
              	; pick


total time: 0.0034 sec.
no errors
